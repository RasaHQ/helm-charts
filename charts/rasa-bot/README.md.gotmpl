{{ template "chart.header" . }}
{{ template "chart.deprecationWarning" . }}

{{ template "chart.badgesSection" . }}

Rasa Bot (Rasa Open Source Server) is an open source machine learning framework for automated text and voice-based conversations. Understand messages, hold conversations, and connect to messaging channels and APIs.

See [Rasa website](https://rasa.com/docs/rasa/) to learn more.

## How to use Rasa Helm repository

You need to add this repository to your Helm repositories:

```shell
helm repo add rasa https://helm.rasa.com
helm repo update
```

{{ template "chart.homepageLine" . }}

{{ template "chart.requirementsSection" . }}

## Quick start

The rasa-bot deploy Rasa Open Source Server which will create a initial project and train model, the trained model is loaded.

Below you can find examples of how to configure your deployment or use more advanced configurations such as integration with Rasa X / Enterprise.

Default components that will be installed along with the rasa-bot:

* RabbitMQ used as backend for [Event Broker](https://rasa.com/docs/rasa/event-brokers)
* PostgreSQL used as backend for [Tracker Store](https://rasa.com/docs/rasa/tracker-stores)
* Redis used as backend for [Lock Store](https://rasa.com/docs/rasa/lock-stores)


### Installing the Rasa Bot Chart

To install the chart with the release name `<RELEASE_NAME>` run the following command:

```bash
helm install --name <RELEASE_NAME> rasa/rasa-bot
```

After the rasa-bot was deployed successfully you should see additional information on how to connect to Rasa OSS, e.g:

```shell
To access Rasa Bot from outside of the cluster, follow the steps below:

1. Get the Rasa URL by running these commands:

    export SERVICE_PORT=$(kubectl get --namespace default -o jsonpath="{.spec.ports[0].port}" services <RELEASE_NAME>)
    kubectl port-forward --namespace default svc/<RELEASE_NAME> ${SERVICE_PORT}:${SERVICE_PORT} &
    echo "http://127.0.0.1:${SERVICE_PORT}"


    NGINX is enabled, in order to send a request that goes through NGINX you can use port: 80
```

After executing the commands above we can send a request to Rasa Bot

```shell
curl http://127.0.0.1:${SERVICE_PORT}
Hello from Rasa: 2.4.0
```

## Custom configuration

As a best practice, a YAML file that specifies the values for the chart parameters should be provided to configure the chart:

1. Copy the default [values.yaml](values.yaml) value file to `rasa-values.yaml`. From now on we'll use the `rasa-values.yaml` values file.
2. Set custom parameters in the rasa-values.yaml
3. Upgrade the Rasa Bot Helm chart with the new rasa-values.yaml file:

```shell
helm upgrade -f rasa-values.yaml <RELEASE_NAME> rasa/rasa-bot
```

### Downloading a initial model

By default, the rasa-bot chart creates an initial project and train a model, but it's also possible to define an existing model to download. In a such scenario, a model is downloaded from a defined URL.

Update your `rasa-values.yaml` with the following configuration:

```yaml
applicationSettings:
  # (...)
  # Initial model to download and load if a model server or remote storage is not used.
  # It has to be a URL (without auth) that points to a tag.gz file.
  initialModel: "https://github.com/RasaHQ/rasa-x-demo/blob/master/models/model.tar.gz?raw=true"
```

then upgrade your Rasa Bot deployment:

```shell
helm upgrade -f rasa-values.yaml <RELEASE_NAME> rasa/rasa-bot
```

### Enabling REST Channel

The `RestInput and CallbackInput` channels can be used for custom integrations. They provide a URL where you can post messages and either receive response messages directly, or asynchronously via a webhook.

To learn more see: https://rasa.com/docs/rasa/connectors/your-own-website/#rest-channels

By default the rasa-bot run without enabled REST channel, update your rasa-values.yaml file with the following REST channel configuration:

```yaml
applicationSettings:
  # (...)
  credentials:
    # (...)
    additionalChannelCredentials:
      rest:
```

then upgrade your Rasa Bot deployment:

```shell
helm upgrade -f rasa-values.yaml <RELEASE_NAME> rasa/rasa-bot
```

### Enabling TLS for NGINX (self-signed)

Update your `rasa-values.yaml` with the following NGINX TLS self-singed configuration:

```yaml
nginx:
  tls:
    enabled: true
    generateSelfSignedCert: true
```

then upgrade your Rasa Bot deployment:

```shell
helm upgrade -f rasa-values.yaml <RELEASE_NAME> rasa/rasa-bot
```

### Exposing the rasa-bot deployment to the public

By default the rasa-bot service is available within a Kubernetes cluster, in order to expose the rasa-bot service to the public update your `rasa-values.yaml` file with the following configuration:

```yaml
service:
    type: LoadBalancer
```

then upgrade your Rasa Bot deployment:

```shell
helm upgrade -f rasa-values.yaml <RELEASE_NAME> rasa/rasa-bot
```

### Enabling External Rasa X / Enterprise

To use Rasa Bot along with Rasa X / Enterprise update `rasa-values.yaml` with the following configuration:

```yaml
applicationSettings:
  rasaX:
    enabled: true
    # here you have to put URL to Rasa Enterprise
    url: "http://rasa-x-rasa-x:5002"
  endpoints:
    # In order to send messages to the same
    # event broker as Rasa X / Enterprise does we can pass
    # a custom configuration.
    eventBroker:
      type: "pika"
      url: "rasa-x-rabbit"
      username: "user"
      password: ${RABBITMQ_PASSWORD}
      port: 5672
      queues:
        - "rasa_production_events"
    # Use Rasa X as a model server
    models:
      useRasaXasModelServer:
        enabled: true
extraEnv:
  # In the configuration for an event broker are used environment variables, thus
  # you have to pass extra environment variables that read values from
  # the rasa-x-rabbit secret.
  - name: "RABBITMQ_PASSWORD"
    valueFrom:
      secretKeyRef:
        name: rasa-x-rabbit
        key: rabbitmq-password
```

In the example above we assumed that the `rasa-x-rabbit` secret already exists and contains the `rabbitmq-password` key.

```shell
helm upgrade -f rasa-values.yaml <RELEASE_NAME> rasa/rasa-bot
```

In addition to Rasa Bot configuration, you have to update Rasa X / Enterprise configuration as well, please visit [the docs](https://link-to-the-docs) to learn more.

### Enabling Rasa X / Enterprise (within the same cluster)

It's possible to use Rasa X / Enterprise as a configuration endpoint, in a such case runtime configuration for Rasa OSS will be pulled from Rasa X / Enterprise.

An example below shows how to configure the Rasa Bot to use Rasa X / Enterprise which is deployed in the same namespace.

Update `rasa-values.yaml` with the following configuration:

```yaml
applicationSettings:
  rasaX:
    enabled: true
    url: "http://rasa-x-rasa-x:5002"
    # Define if a runtime configuration should be pulled
    # from Rasa X / Enterprise
    useConfigEndpoint: true
```

Below we can see an example of a runtime configuration that is pulled from Rasa X / Enterprise:

```yaml
models:
  url: ${RASA_MODEL_SERVER}
  token: ${RASA_X_TOKEN}
  wait_time_between_pulls: 10
tracker_store:
  type: sql
  dialect: "postgresql"
  url: rasa-x-postgresql
  port: 5432
  username: postgres
  password: ${DB_PASSWORD}
  db: ${DB_DATABASE}
  login_db: rasa
event_broker:
  type: "pika"
  url: "rasa-x-rabbit"
  username: "user"
  password: ${RABBITMQ_PASSWORD}
  port: 5672
  queues:
  - ${RABBITMQ_QUEUE}

action_endpoint:
  url: "http://rasa-bot-rasa-action-server/webhook"
  token:  ""
lock_store:
  type: "redis"
  url: rasa-x-redis-master
  port: 6379
  password: ${REDIS_PASSWORD}
  db: 1
cache:
  type: "redis"
  url: rasa-x-redis-master
  port: 6379
  password: ${REDIS_PASSWORD}
  db: 2
  key_prefix: "rasax_cache"
```

The configuration uses environment variables, that's why you have to add extra environment variables to the rasa bot. Full `rasa-values.yaml` should look like this:

```yaml
applicationSettings:
  rasaX:
    enabled: true
    url: "http://rasa-x-rasa-x:5002"
    # Define if a runtime configuration should be pulled
    # from Rasa X / Enterprise
    useConfigEndpoint: true

## Don't install additional components.
## The components installed by Rasa X / Enterprise are used instead.
postgresql:
  install: false
redis:
  install: false
rabbitmq:
  install: false

## Extra environment variables used in the Rasa X / Enterprise configuration
extraEnv:
 - name: RASA_MODEL_SERVER
   value: http://rasa-x-rasa-x:5002/api/projects/default/models/tags/production
 - name: RASA_X_TOKEN
   valueFrom:
     secretKeyRef:
       name: rasa-x-rasa
       key: "rasaXToken"
 - name: "DB_PASSWORD"
   valueFrom:
     secretKeyRef:
       name: rasa-x-postgresql
       key: postgresql-password
 - name: "DB_DATABASE"
   value: "rasa_production"
 - name: "REDIS_PASSWORD"
   valueFrom:
     secretKeyRef:
       name: rasa-x-redis
       key: redis-password
 - name: "RABBITMQ_QUEUE"
   value: rasa_production_events
 - name: "RABBITMQ_PASSWORD"
   valueFrom:
     secretKeyRef:
       name: rasa-x-rabbit
       key: rabbitmq-password

```

then upgrade your Rasa Bot deployment:

```shell
helm upgrade -f rasa-values.yaml <RELEASE_NAME> rasa/rasa-bot
```

{{ template "chart.valuesSection" . }}
